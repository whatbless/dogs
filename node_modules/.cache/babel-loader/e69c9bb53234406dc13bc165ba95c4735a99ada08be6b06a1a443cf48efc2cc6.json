{"ast":null,"code":"import { create } from \"zustand\";\nexport const useDogStore = create(set => ({\n  dogs: [],\n  // Указываем тип для dogs\n  fetchDogs: async () => {\n    const response = await fetch(\"https://dog.ceo/api/breeds/image/random/10\");\n    const data = await response.json();\n\n    // Преобразуем полученные данные, добавляем name и description\n    set({\n      dogs: data.message.map((url, index) => ({\n        id: index,\n        url,\n        name: `Dog ${index + 1}`,\n        // Примерное имя для собаки\n        description: `Это описание собаки ${index + 1}` // Примерное описание\n      }))\n    });\n  },\n  likeDog: dogId => {\n    set(state => ({\n      dogs: state.dogs.map(dog => dog.id === dogId ? {\n        ...dog,\n        liked: !dog.liked\n      } : dog)\n    }));\n  },\n  removeDog: dogId => {\n    set(state => ({\n      dogs: state.dogs.filter(dog => dog.id !== dogId)\n    }));\n  }\n}));","map":{"version":3,"names":["create","useDogStore","set","dogs","fetchDogs","response","fetch","data","json","message","map","url","index","id","name","description","likeDog","dogId","state","dog","liked","removeDog","filter"],"sources":["/Users/romchik/Documents/react/dogs/my-app/src/zustand/store.ts"],"sourcesContent":["import { create } from \"zustand\";\n\ntype DogImage = {\n    id: number;\n    url: string;\n    name: string;        // Добавляем поле для имени\n    description: string; // Добавляем поле для описания\n    liked?: boolean;     // Можно добавить поле liked, чтобы отслеживать лайкнуто ли изображение\n  };\n\nexport const useDogStore = create((set) => ({\n    dogs: [] as DogImage[], // Указываем тип для dogs\n    fetchDogs: async () => {\n      const response = await fetch(\"https://dog.ceo/api/breeds/image/random/10\");\n      const data = await response.json();\n      \n      // Преобразуем полученные данные, добавляем name и description\n      set({\n        dogs: data.message.map((url, index) => ({\n          id: index,\n          url,\n          name: `Dog ${index + 1}`,         // Примерное имя для собаки\n          description: `Это описание собаки ${index + 1}`, // Примерное описание\n        })),\n      });\n    },\n    likeDog: (dogId: number) => {\n      set((state) => ({\n        dogs: state.dogs.map((dog) =>\n          dog.id === dogId ? { ...dog, liked: !dog.liked } : dog\n        ),\n      }));\n    },\n    removeDog: (dogId: number) => {\n      set((state) => ({\n        dogs: state.dogs.filter((dog) => dog.id !== dogId),\n      }));\n    },\n  }));"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAUhC,OAAO,MAAMC,WAAW,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACxCC,IAAI,EAAE,EAAgB;EAAE;EACxBC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;IAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAElC;IACAN,GAAG,CAAC;MACFC,IAAI,EAAEI,IAAI,CAACE,OAAO,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,MAAM;QACtCC,EAAE,EAAED,KAAK;QACTD,GAAG;QACHG,IAAI,EAAE,OAAOF,KAAK,GAAG,CAAC,EAAE;QAAU;QAClCG,WAAW,EAAE,uBAAuBH,KAAK,GAAG,CAAC,EAAE,CAAE;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EACDI,OAAO,EAAGC,KAAa,IAAK;IAC1Bf,GAAG,CAAEgB,KAAK,KAAM;MACdf,IAAI,EAAEe,KAAK,CAACf,IAAI,CAACO,GAAG,CAAES,GAAG,IACvBA,GAAG,CAACN,EAAE,KAAKI,KAAK,GAAG;QAAE,GAAGE,GAAG;QAAEC,KAAK,EAAE,CAACD,GAAG,CAACC;MAAM,CAAC,GAAGD,GACrD;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EACDE,SAAS,EAAGJ,KAAa,IAAK;IAC5Bf,GAAG,CAAEgB,KAAK,KAAM;MACdf,IAAI,EAAEe,KAAK,CAACf,IAAI,CAACmB,MAAM,CAAEH,GAAG,IAAKA,GAAG,CAACN,EAAE,KAAKI,KAAK;IACnD,CAAC,CAAC,CAAC;EACL;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}